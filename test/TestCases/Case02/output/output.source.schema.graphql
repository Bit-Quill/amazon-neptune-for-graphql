type Continent @alias(property: "continent") {
  _id: ID! @id
  code: String
  type: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType: "contains", direction: OUT)
  contains: Contains
}

input ContinentInput {
  _id: ID @id
  code: String
  type: String
  desc: String
}

type Country @alias(property: "country") {
  _id: ID! @id
  code: String
  type: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType: "contains", direction: OUT)
  contains: Contains
}

input CountryInput {
  _id: ID @id
  code: String
  type: String
  desc: String
}

type Version @alias(property: "version") {
  _id: ID! @id
  date: String
  code: String
  author: String
  type: String
  desc: String
}

input VersionInput {
  _id: ID @id
  date: String
  code: String
  author: String
  type: String
  desc: String
}

type Airport @alias(property: "airport") {
  _id: ID! @id
  country: String
  longest: Float
  code: String
  city: String
  elev: Float
  icao: String
  lon: Float
  runways: Float
  region: String
  type: String
  lat: Float
  desc: String
  continentContainsIn: Continent @relationship(edgeType: "contains", direction: IN)
  countryContainsIn: Country @relationship(edgeType: "contains", direction: IN)
  airportRoutesOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType: "route", direction: OUT)
  airportRoutesIn(filter: AirportInput, options: Options): [Airport] @relationship(edgeType: "route", direction: IN)
  contains: Contains
  route: Route
}

input AirportInput {
  _id: ID @id
  country: String
  longest: Float
  code: String
  city: String
  elev: Float
  icao: String
  lon: Float
  runways: Float
  region: String
  type: String
  lat: Float
  desc: String
}

type Contains @alias(property: "contains") {
  _id: ID! @id
}

type Route @alias(property: "route") {
  _id: ID! @id
  dist: Int
}

input RouteInput {
  dist: Int
}

input Options {
  limit: Int
}

type Query {
  getNodeContinent(filter: ContinentInput): Continent
  getNodeContinents(filter: ContinentInput, options: Options): [Continent]
  getNodeCountry(filter: CountryInput): Country
  getNodeCountrys(filter: CountryInput, options: Options): [Country]
  getNodeVersion(filter: VersionInput): Version
  getNodeVersions(filter: VersionInput, options: Options): [Version]
  getNodeAirport(filter: AirportInput): Airport
  getNodeAirports(filter: AirportInput, options: Options): [Airport]
}

type Mutation {
  createNodeContinent(input: ContinentInput!): Continent
  updateNodeContinent(input: ContinentInput!): Continent
  deleteNodeContinent(_id: ID!): Boolean
  createNodeCountry(input: CountryInput!): Country
  updateNodeCountry(input: CountryInput!): Country
  deleteNodeCountry(_id: ID!): Boolean
  createNodeVersion(input: VersionInput!): Version
  updateNodeVersion(input: VersionInput!): Version
  deleteNodeVersion(_id: ID!): Boolean
  createNodeAirport(input: AirportInput!): Airport
  updateNodeAirport(input: AirportInput!): Airport
  deleteNodeAirport(_id: ID!): Boolean
  connectNodeContinentToNodeAirportEdgeContains(from_id: ID!, to_id: ID!): Contains
  deleteEdgeContainsFromContinentToAirport(from_id: ID!, to_id: ID!): Boolean
  connectNodeCountryToNodeAirportEdgeContains(from_id: ID!, to_id: ID!): Contains
  deleteEdgeContainsFromCountryToAirport(from_id: ID!, to_id: ID!): Boolean
  connectNodeAirportToNodeAirportEdgeRoute(from_id: ID!, to_id: ID!, edge: RouteInput!): Route
  updateEdgeRouteFromAirportToAirport(from_id: ID!, to_id: ID!, edge: RouteInput!): Route
  deleteEdgeRouteFromAirportToAirport(from_id: ID!, to_id: ID!): Boolean
}

schema {
  query: Query
  mutation: Mutation
}