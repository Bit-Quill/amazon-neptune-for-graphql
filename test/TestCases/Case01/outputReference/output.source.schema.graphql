enum SortingDirection {
  ASC
  DESC
}

type Continent @alias(property: "continent") {
  id: ID! @id
  code: String
  type: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType: "contains", direction: OUT)
  contains: Contains
}

input ContinentInput {
  id: ID @id
  code: StringScalarFilters
  type: StringScalarFilters
  desc: StringScalarFilters
}

input ContinentCreateInput {
  id: ID @id
  code: String
  type: String
  desc: String
}

input ContinentUpdateInput {
  id: ID! @id
  code: String
  type: String
  desc: String
}

input ContinentSort {
  id: SortingDirection
  type: SortingDirection
  code: SortingDirection
  desc: SortingDirection
}

type Country @alias(property: "country") {
  _id: ID! @id
  code: String
  type: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType: "contains", direction: OUT)
  contains: Contains
}

input CountryInput {
  _id: ID @id
  code: StringScalarFilters
  type: StringScalarFilters
  desc: StringScalarFilters
}

input CountryCreateInput {
  _id: ID @id
  code: String
  type: String
  desc: String
}

input CountryUpdateInput {
  _id: ID! @id
  code: String
  type: String
  desc: String
}

input CountrySort {
  _id: SortingDirection
  code: SortingDirection
  type: SortingDirection
  desc: SortingDirection
}

type Version @alias(property: "version") {
  _id: ID! @id
  date: String
  code: String
  author: String
  type: String
  desc: String
}

input VersionInput {
  _id: ID @id
  date: StringScalarFilters
  code: StringScalarFilters
  author: StringScalarFilters
  type: StringScalarFilters
  desc: StringScalarFilters
}

input VersionCreateInput {
  _id: ID @id
  date: String
  code: String
  author: String
  type: String
  desc: String
}

input VersionUpdateInput {
  _id: ID! @id
  date: String
  code: String
  author: String
  type: String
  desc: String
}

input VersionSort {
  _id: SortingDirection
  date: SortingDirection
  code: SortingDirection
  author: SortingDirection
  type: SortingDirection
  desc: SortingDirection
}

type Airport @alias(property: "airport") {
  _id: ID! @id
  country: String
  longest: Int
  code: String
  city: String
  elev: Int
  icao: String
  lon: Float
  runways: Int
  region: String
  type: String
  lat: Float
  desc2: String @alias(property: "desc")
  outboundRoutesCount: Int @graphQuery(statement: "MATCH (this)-[r:route]->(a) RETURN count(r)")
  continentContainsIn: Continent @relationship(edgeType: "contains", direction: IN)
  countryContainsIn: Country @relationship(edgeType: "contains", direction: IN)
  airportRoutesOut(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType: "route", direction: OUT)
  airportRoutesIn(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType: "route", direction: IN)
  contains: Contains
  route: Route
  outboundRoutesCountAdd: Int @graphQuery(statement: "MATCH (this)-[r:route]->(a) RETURN count(r)")
}

input AirportInput {
  _id: ID @id
  country: StringScalarFilters
  longest: Int
  code: StringScalarFilters
  city: StringScalarFilters
  elev: Int
  icao: StringScalarFilters
  lon: Float
  runways: Int
  region: StringScalarFilters
  type: StringScalarFilters
  lat: Float
  desc: StringScalarFilters
}

input AirportCreateInput {
  _id: ID @id
  country: String
  longest: Int
  code: String
  city: String
  elev: Int
  icao: String
  lon: Float
  runways: Int
  region: String
  type: String
  lat: Float
  desc: String
}

input AirportUpdateInput {
  _id: ID! @id
  country: String
  longest: Int
  code: String
  city: String
  elev: Int
  icao: String
  lon: Float
  runways: Int
  region: String
  type: String
  lat: Float
  desc: String
}

input AirportSort {
  country: SortingDirection
  longest: SortingDirection
  code: SortingDirection
  city: SortingDirection
  elev: SortingDirection
  icao: SortingDirection
  lon: SortingDirection
  runways: SortingDirection
  region: SortingDirection
  type: SortingDirection
  lat: SortingDirection
  desc: SortingDirection
}

type Contains @alias(property: "contains") {
  _id: ID! @id
}

type Route @alias(property: "route") {
  _id: ID! @id
  dist: Int
}

input RouteInput {
  dist: Int
}

input Options {
  limit: Int
  offset: Int
}

input StringScalarFilters {
  eq: String
  contains: String
  endsWith: String
  startsWith: String
}

type Query {
  getAirport(code: String): Airport
  getAirportConnection(fromCode: String!, toCode: String!): Airport @cypher(statement: "MATCH (:airport{code: '$fromCode'})-[:route]->(this:airport)-[:route]->(:airport{code:'$toCode'})")
  getAirportWithGremlin(code: String): Airport @graphQuery(statement: "g.V().has('airport', 'code', '$code').elementMap()")
  getContinentsWithGremlin: [Continent] @graphQuery(statement: "g.V().hasLabel('continent').elementMap().fold()")
  getCountriesCountGremlin: Int @graphQuery(statement: "g.V().hasLabel('country').count()")
  getNodeContinent(filter: ContinentInput): Continent
  getNodeContinents(filter: ContinentInput, options: Options, sort: [ContinentSort!]): [Continent]
  getNodeCountry(filter: CountryInput): Country
  getNodeCountrys(filter: CountryInput, options: Options, sort: [CountrySort!]): [Country]
  getNodeVersion(filter: VersionInput): Version
  getNodeVersions(filter: VersionInput, options: Options, sort: [VersionSort!]): [Version]
  getNodeAirport(filter: AirportInput): Airport
  getNodeAirports(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport]
  getAirportWithGremlin(code: String): Airport @graphQuery(statement: "g.V().has('airport', 'code', '$code').elementMap()")
  getCountriesCount: Int @graphQuery(statement: "g.V().hasLabel('country').count()")
}

type Mutation {
  createAirport(input: AirportInput!): Airport @graphQuery(statement: "CREATE (this:airport {$input}) RETURN this")
  addRoute(fromAirportCode: String, toAirportCode: String, dist: Int): Route @graphQuery(statement: "MATCH (from:airport{code:'$fromAirportCode'}), (to:airport{code:'$toAirportCode'}) CREATE (from)-[this:route{dist:$dist}]->(to) RETURN this")
  deleteAirport(id: ID): Int @graphQuery(statement: "MATCH (this:airport) WHERE ID(this) = '$id' DETACH DELETE this")
  createNodeContinent(input: ContinentCreateInput!): Continent
  updateNodeContinent(input: ContinentUpdateInput!): Continent
  deleteNodeContinent(_id: ID!): Boolean
  createNodeCountry(input: CountryCreateInput!): Country
  updateNodeCountry(input: CountryUpdateInput!): Country
  deleteNodeCountry(_id: ID!): Boolean
  updateNodeVersion(input: VersionUpdateInput!): Version
  createNodeAirport(input: AirportCreateInput!): Airport
  updateNodeAirport(input: AirportUpdateInput!): Airport
  deleteNodeAirport(_id: ID!): Boolean
  connectNodeContinentToNodeAirportEdgeContains(from_id: ID!, to_id: ID!): Contains
  deleteEdgeContainsFromContinentToAirport(from_id: ID!, to_id: ID!): Boolean
  connectNodeCountryToNodeAirportEdgeContains(from_id: ID!, to_id: ID!): Contains
  deleteEdgeContainsFromCountryToAirport(from_id: ID!, to_id: ID!): Boolean
  connectNodeAirportToNodeAirportEdgeRoute(from_id: ID!, to_id: ID!, edge: RouteInput!): Route
  updateEdgeRouteFromAirportToAirport(from_id: ID!, to_id: ID!, edge: RouteInput!): Route
  deleteEdgeRouteFromAirportToAirport(from_id: ID!, to_id: ID!): Boolean
}

schema {
  query: Query
  mutation: Mutation
}